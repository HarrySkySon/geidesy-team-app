name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Testing phase
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
          mobile/package-lock.json

    # Backend tests
    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Generate Prisma client
      run: cd backend && npx prisma generate

    - name: Run database migrations
      run: cd backend && npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run backend tests
      run: cd backend && npm test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        NODE_ENV: test

    - name: Run backend linting
      run: cd backend && npm run lint

    - name: Check backend TypeScript
      run: cd backend && npm run type-check

    # Frontend tests
    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Run frontend tests
      run: cd frontend && npm test

    - name: Run frontend linting
      run: cd frontend && npm run lint

    - name: Check frontend TypeScript
      run: cd frontend && npm run type-check

    - name: Build frontend
      run: cd frontend && npm run build

    # Mobile tests
    - name: Install mobile dependencies
      run: cd mobile && npm ci

    - name: Run mobile tests
      run: cd mobile && npm test

    - name: Run mobile linting
      run: cd mobile && npm run lint

    - name: Check mobile TypeScript
      run: cd mobile && npm run type-check

    # Security scanning
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level moderate
        cd frontend && npm audit --audit-level moderate
        cd mobile && npm audit --audit-level moderate

    # Upload test coverage
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info,./mobile/coverage/lcov.info
        fail_ci_if_error: false

  # Build and push Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Backend image
    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Frontend image
    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Run staging health checks
      run: |
        echo "Running health checks on staging..."
        # Add health check commands

    - name: Notify staging deployment
      run: |
        echo "Staging deployment completed successfully"
        # Add notification logic (Slack, Discord, etc.)

  # Deploy to production
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        
        # Example deployment script
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/surveying-team-app
          
          # Pull latest changes
          git pull origin master
          
          # Update environment variables
          cp .env.production .env
          
          # Pull latest Docker images
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop old containers
          docker-compose -f docker-compose.prod.yml down
          
          # Start new containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Run database migrations
          docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy
          
          # Verify deployment
          curl -f http://localhost/health || exit 1
        EOF

    - name: Run production health checks
      run: |
        echo "Running comprehensive health checks..."
        
        # API health check
        curl -f https://your-domain.com/api/health
        
        # Frontend health check  
        curl -f https://your-domain.com/health
        
        # Database connectivity check
        # Add database health check commands

    - name: Update DNS if needed
      run: |
        echo "Checking DNS configuration..."
        # Add DNS update logic if using blue-green deployment

    - name: Notify production deployment
      run: |
        echo "Production deployment completed successfully"
        # Add notification logic (Slack, email, etc.)
        
    - name: Create GitHub release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release created by GitHub Actions
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
          
          Deployed at: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --detection-depth=6

  # Performance testing
  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Run performance tests
      run: |
        echo "Running performance tests against staging..."
        # Add performance testing commands
        # Example: k6 run performance-tests.js
        
    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # Add performance report generation