// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  ADMIN
  SUPERVISOR
  TEAM_MEMBER
}

// Task status enum
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Task priority enum
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Team status enum
enum TeamStatus {
  ACTIVE
  INACTIVE
  ON_BREAK
}

// Users table
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          UserRole
  name          String
  phone         String?
  profileImage  String?  @map("profile_image")
  isActive      Boolean  @default(true) @map("is_active")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  createdTasks  Task[]        @relation("TaskCreator")
  teamMembers   TeamMember[]
  taskReports   TaskReport[]
  refreshTokens RefreshToken[]
  notifications Notification[]

  @@map("users")
}

// Teams table
model Team {
  id          String     @id @default(cuid())
  name        String
  description String?
  status      TeamStatus @default(ACTIVE)
  leaderId    String?    @map("leader_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  members    TeamMember[]
  tasks      Task[]
  locations  TeamLocation[]

  @@map("teams")
}

// Team members (many-to-many relationship)
model TeamMember {
  id       String @id @default(cuid())
  teamId   String @map("team_id")
  userId   String @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

// Sites table with geospatial support
model Site {
  id          String @id @default(cuid())
  name        String
  address     String?
  latitude    Float
  longitude   Float
  description String?
  clientInfo  Json?  @map("client_info")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tasks Task[]

  @@map("sites")
}

// Tasks table
model Task {
  id                String       @id @default(cuid())
  siteId            String       @map("site_id")
  teamId            String?      @map("team_id")
  title             String
  description       String?
  priority          TaskPriority @default(MEDIUM)
  status            TaskStatus   @default(PENDING)
  scheduledDate     DateTime?    @map("scheduled_date")
  estimatedDuration Int?         @map("estimated_duration") // in minutes
  actualDuration    Int?         @map("actual_duration")    // in minutes
  createdById       String       @map("created_by_id")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  completedAt       DateTime?    @map("completed_at")

  // Relations
  site        Site           @relation(fields: [siteId], references: [id])
  team        Team?          @relation(fields: [teamId], references: [id])
  createdBy   User           @relation("TaskCreator", fields: [createdById], references: [id])
  reports     TaskReport[]
  attachments TaskAttachment[]

  @@map("tasks")
}

// Task reports
model TaskReport {
  id          String   @id @default(cuid())
  taskId      String   @map("task_id")
  userId      String   @map("user_id")
  title       String
  description String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  task        Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id])
  attachments ReportAttachment[]

  @@map("task_reports")
}

// Task attachments (photos, documents)
model TaskAttachment {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  filename  String
  originalName String @map("original_name")
  mimeType  String   @map("mime_type")
  size      Int
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

// Report attachments
model ReportAttachment {
  id         String   @id @default(cuid())
  reportId   String   @map("report_id")
  filename   String
  originalName String @map("original_name")
  mimeType   String   @map("mime_type")
  size       Int
  url        String
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  report TaskReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_attachments")
}

// Team location tracking
model TeamLocation {
  id        String   @id @default(cuid())
  teamId    String   @map("team_id")
  latitude  Float
  longitude Float
  accuracy  Float?
  timestamp DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_locations")
}

// Refresh tokens for JWT
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}